import requests
from bs4 import BeautifulSoup
import asyncio
import aiohttp
import json
import time
import logging

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# List of domains to whitelist
WHITELIST_DOMAINS = {"google.com", "facebook.com"}

class VulnerabilityScanner:
    def __init__(self, url, session=None):
        self.url = url
        self.session = session or requests.Session()
        self.vulnerabilities = []

    def get_domain(self):
        return self.url.split("//")[-1].split("/")[0]

    async def fetch(self, session, url):
        async with session.get(url) as response:
            return await response.text(), response.cookies, response.headers

    async def analyze_page(self):
        domain = self.get_domain()
        if domain in WHITELIST_DOMAINS:
            self.vulnerabilities.append(f"{domain} is in the whitelist, skipping detailed vulnerability scan.")
            return self.vulnerabilities

        async with aiohttp.ClientSession() as session:
            try:
                page_content, cookies, headers = await self.fetch(session, self.url)
                soup = BeautifulSoup(page_content, 'html.parser')

                # Check for vulnerabilities
                self.check_xss(soup)
                self.check_sql_injection(soup)
                self.check_csrf(soup)
                self.check_open_redirect(soup)
                self.check_insecure_cookies(cookies)
                await self.check_sensitive_paths(session)
                self.check_security_headers(headers)

                return self.vulnerabilities or ["No vulnerabilities found."]

            except Exception as e:
                self.vulnerabilities.append(f"Error: {str(e)}")
                return self.vulnerabilities

    def check_xss(self, soup):
        if soup.find_all('script'):
            self.vulnerabilities.append("[High] Potential XSS vulnerability: script tags found.")

    def check_sql_injection(self, soup):
        forms = soup.find_all('form')
        for form in forms:
            action = form.get('action', '')
            if any(char in action for char in ["'", ";", "--"]):
                self.vulnerabilities.append("[High] Potential SQL Injection risk in form action URL.")

    def check_csrf(self, soup):
        forms = soup.find_all('form')
        for form in forms:
            if form.get('method', '').lower() == "post" and not form.find('input', {'name': 'csrf_token'}):
                self.vulnerabilities.append("[Medium] Potential CSRF risk: missing CSRF token in POST form.")

    def check_open_redirect(self, soup):
        links = soup.find_all('a')
        if any("redirect" in link.get('href', '') for link in links):
            self.vulnerabilities.append("[Medium] Potential Open Redirect found.")

    def check_insecure_cookies(self, cookies):
        for cookie in cookies:
            if not cookie.has_nonstandard_attr('HttpOnly'):
                self.vulnerabilities.append(f"[Low] Cookie '{cookie.name}' is missing HttpOnly flag.")
            if not cookie.has_nonstandard_attr('Secure') and self.url.startswith("https"):
                self.vulnerabilities.append(f"[Low] Cookie '{cookie.name}' is missing Secure flag.")

    async def check_sensitive_paths(self, session):
        sensitive_paths = ['/admin', '/config', '/backup']
        for path in sensitive_paths:
            head_url = self.url + path
            async with session.head(head_url) as response:
                if response.status == 200:
                    self.vulnerabilities.append(f"[High] Sensitive path found: {head_url}")

    def check_security_headers(self, headers):
        missing_headers = []
        if 'X-Frame-Options' not in headers:
            missing_headers.append("X-Frame-Options")
        if 'Content-Security-Policy' not in headers:
            missing_headers.append("Content Security Policy")

        if missing_headers:
            self.vulnerabilities.append(f"[Medium] Missing headers: {', '.join(missing_headers)}.")

    def save_results(self, output_format='text'):
        if output_format == 'json':
            with open('scan_results.json', 'w') as f:
                json.dump(self.vulnerabilities, f, indent=4)
            logging.info("Results saved to scan_results.json")
        else:
            with open('scan_results.txt', 'w') as f:
                for vulnerability in self.vulnerabilities:
                    f.write(vulnerability + '\n')
            logging.info("Results saved to scan_results.txt")

def chatbot():
    print("Chatbot is ready! Type 'exit' to quit.")
    while True:
        user_input = input("You: ")
        if user_input.lower() == "exit":
            break
        elif user_input.lower().startswith("scan "):
            url = user_input.split("scan ", 1)[1].strip()
            scanner = VulnerabilityScanner(url)
            results = asyncio.run(scanner.analyze_page())
            for result in results:
                print("Bot:", result)
            scanner.save_results(output_format='json')  # Save results as JSON
        else:
            print("Bot: You can ask me to 'scan [URL]' to check for vulnerabilities.")

# Run the chatbot
if __name__ == "__main__":
    chatbot()
